@model (string Name, string? Label, string? Type, string? Placeholder, bool Required, string? Value, string? HelpText)
@{
    var inputId = $"input-{Model.Name}";
    var type = Model.Type ?? "text";
    var hasError = ViewData.ModelState[Model.Name]?.Errors.Count > 0;
}

<div class="space-y-2">
    @if (!string.IsNullOrEmpty(Model.Label))
    {
        <label for="@inputId" class="block text-sm font-medium text-gray-900">
            @Model.Label
            @if (Model.Required)
            {
                <span class="text-red-500 ml-1">*</span>
            }
        </label>
    }
    
    <div class="relative">
        <input 
            id="@inputId"
            name="@Model.Name"
            type="@type"
            value="@Model.Value"
            placeholder="@Model.Placeholder"
            class="@(hasError ? 
                "block w-full rounded-lg border-red-300 bg-red-50 text-red-900 placeholder-red-400 focus:border-red-500 focus:ring-red-500 sm:text-sm" : 
                "block w-full rounded-lg border-gray-300 bg-white px-3 py-2.5 text-gray-900 placeholder-gray-400 shadow-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500 focus:ring-offset-0 sm:text-sm transition-all duration-200 hover:border-gray-400")"
            @(Model.Required ? "required" : "")
        />
        
        @if (hasError)
        {
            <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                <i data-lucide="alert-circle" class="h-5 w-5 text-red-500"></i>
            </div>
        }
    </div>
    
    @if (!string.IsNullOrEmpty(Model.HelpText))
    {
        <p class="text-sm text-gray-600">@Model.HelpText</p>
    }
    
    @if (hasError)
    {
        <div class="flex items-center space-x-2">
            <i data-lucide="alert-triangle" class="h-4 w-4 text-red-500 flex-shrink-0"></i>
            <span class="text-sm text-red-600">
                @ViewData.ModelState[Model.Name]?.Errors.FirstOrDefault()?.ErrorMessage
            </span>
        </div>
    }
</div> 